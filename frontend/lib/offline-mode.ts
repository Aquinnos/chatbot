const offlineResponses = [
  "This is a response generated locally in offline mode. You currently don't have a configured connection to the GLHF API.",
  'Offline mode active. This response is generated locally because no API key was detected.',
  'To use the full functionality of the chat, set the API key in the environment variables (GLHF_API_KEY).',
  'This response is simulated. In offline mode, there is no ability to generate content using a language model.',
  'This is the demo mode of the application. Add an API key to use language models.',
  'I am running in offline mode. My responses are pre-defined and not generated by an AI model.',
  'For a more interactive experience, please configure your GLHF API key in the .env.local file.',
  'Offline mode limits my capabilities. Add your API key to experience the full potential of the chatbot.',
  'I wish I could help more, but I am currently in offline mode without access to a language model.',
  'In offline mode, I can only respond with pre-written messages. Consider adding your API key to enable AI-powered responses.',
  'This is a placeholder response. Connect to the GLHF API for dynamic, AI-generated answers.',
  'The application is currently running in demo mode without an API connection. My responses are limited.',
  'Want more intelligent responses? Configure your GLHF API key to unlock AI capabilities.',
  'I am currently operating with limited functionality in offline mode.',
  'Offline mode activated - my responses are simple and pre-defined. Connect to the API for better interactions.',
];

const topicResponses: Record<string, string[]> = {
  coding: [
    "In offline mode, I can't help with coding questions. Please add an API key for programming assistance.",
    "To get coding help, you'll need to configure the GLHF API key first.",
    "I see you're asking about code! Unfortunately, I need an API connection to provide useful coding advice.",
  ],
  weather: [
    "I can't check the weather in offline mode. Please add your API key for real-time information.",
    'Weather forecasts require an active API connection, which is currently unavailable in offline mode.',
  ],
  health: [
    "Health questions require professional advice. Also, I'm in offline mode and can't provide specific information.",
    "For health-related inquiries, please consult a professional. I'm also limited by offline mode.",
  ],
  general: [
    "That's an interesting question! Unfortunately, I'm in offline mode and can't generate a proper response.",
    'I wish I could answer that properly, but I need an API connection first.',
    'Great question! Add your API key to get an AI-generated response to this.',
  ],
};

const topicKeywords: Record<string, string[]> = {
  coding: [
    'code',
    'programming',
    'javascript',
    'python',
    'function',
    'bug',
    'error',
    'typescript',
    'developer',
    'css',
    'html',
  ],
  weather: [
    'weather',
    'temperature',
    'forecast',
    'rain',
    'sunny',
    'climate',
    'snow',
    'humidity',
    'hot',
    'cold',
  ],
  health: [
    'health',
    'doctor',
    'symptoms',
    'disease',
    'medical',
    'medicine',
    'pain',
    'treatment',
    'diet',
    'exercise',
  ],
};

export function getOfflineResponse(userMessage?: string): string {
  if (!userMessage || userMessage.trim() === '') {
    const randomIndex = Math.floor(Math.random() * offlineResponses.length);
    return offlineResponses[randomIndex];
  }

  const message = userMessage.toLowerCase();

  for (const [topic, keywords] of Object.entries(topicKeywords)) {
    if (keywords.some((keyword) => message.includes(keyword))) {
      const responses = topicResponses[topic];
      return responses[Math.floor(Math.random() * responses.length)];
    }
  }

  const generalResponses = topicResponses.general;
  return generalResponses[Math.floor(Math.random() * generalResponses.length)];
}

export function isApiConfigured(): boolean {
  return (
    typeof process !== 'undefined' &&
    typeof process.env !== 'undefined' &&
    !!process.env.GLHF_API_KEY
  );
}
